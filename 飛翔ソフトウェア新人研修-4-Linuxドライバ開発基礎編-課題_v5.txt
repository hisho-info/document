┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 新人用 Linuxドライバ開発基礎編                              2014/04/10 庭  ┃
┃                                                         v3  2016/07/11 庭  ┃
┃                                                         v4  2021/03/22 庭  ┃
┃                                                         v5  2021/04/08 庭  ┃
┃                                                        v5α 2022/03/23 庭  ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

--------------------------------------------------------------------------------
はじめに
--------------------------------------------------------------------------------
以下の技術習得を前提としています
  ・飛翔ソフトウェア新人研修-4-Linuxドライバ開発編の課題が完了していること
  ・新人情報共有資料の内容を理解している事

ログで確認した場合は、そのログも提出する事。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
================================================================================
【課題１】サスペンド・レジューム
================================================================================

【関連章】
  第7章 サスペンド機能

【確認項目】
  ・「飛翔ソフトウェア新人研修-4-Linuxドライバ開発編」で作成したドライバに
    suspend, resume関数を登録する
  ・suspend, resumeが動作してるかをカーネルログを取得し、確認する。
    ※USBケーブルを抜かないとsuspendしないので注意すること
  ・LED点滅中はsuspendしないこと、LED消灯中はsuspendすることを確認する

================================================================================
【課題２】タイマ
================================================================================

【関連章】
  第9章 タイマ

【確認項目】
  ・モジュールパラメータを契機にしてタイマの生成・停止ができるようにする
  ・動作をログで確認する。
  ・タイマハンドラではコンテキストが分かるようにログを仕込むこと
    ※以下のマクロでチェックできる
    in_atomic()
    in_interrupt()
    ※以下の関数でスタックをkernel logへダンプすることができる
    dump_stack()

================================================================================
【課題３】ワークキュー
================================================================================

【関連章】
  第10章 遅延処理

【確認項目】
  ・ワークキューを生成し、課題２で作ったタイマハンドラからワークキュー実行させる
  ・ワークキューの破棄も忘れずに行う事
  ・独自のキューを生成する方法と、kernel共通のキューを使用する方法の二種類を行う
  ・ワークキューのflush処理を行い、動作を確認する
    (ワークキューの処理が終わるまでflush関数内で待たされている事)

================================================================================
【課題４】排他制御
================================================================================

【確認項目】
  ・mutex,spinlockを使い、
    スレッドとワークキュー間の排他制御
    タイマハンドラとスレッドorワークキュー間の排他制御
    を実装する
  ・わざとデッドロックが発生するプログラムを作成し、kernel panicを発生させる。
    UARTログを取得し、デッドロックが発生している事を証明する事
    (解析内容をテキストにまとめる)
    (紙でいいのでシーケンスを書いてみる)

================================================================================
【課題５】malloc
================================================================================

【確認項目】
  ・vmalloc/kmalloc/alloc_pagesの違いを調べる
  ・OOMとは何か、調べる
  ・low memory killerとは何か、調べる
  ・slabinfo、meminfo、vmallocinfo、buddyinfoはどのような情報が取れるのか調査し、
    実際にvmalloc/kmalloc/alloc_pagesを行い変化を見る
