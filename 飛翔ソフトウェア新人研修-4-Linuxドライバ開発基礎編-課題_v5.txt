┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 新人用 Linuxドライバ開発基礎編                              2014/04/10 庭  ┃
┃                                                         v3  2016/07/11 庭  ┃
┃                                                         v4  2021/03/22 庭  ┃
┃                                                         v5  2021/04/08 庭  ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

--------------------------------------------------------------------------------
はじめに
--------------------------------------------------------------------------------
以下の技術習得を前提としています
  ・ビルドが出来る事
  ・端末のソフト書き換えが出来る事
  ・ADBが使える事
  ・新人情報共有資料の内容を理解している事

ログで確認した場合は、そのログも提出する事。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
================================================================================
【課題１】デバイスドライバの作成
================================================================================

【関連章】
  第1章 デバイス・ドライバの登録方法
  第4章 メイクファイルについて
  第3章 ログ

【確認項目】
  ・module_init/module_exitを使用してデバイスドライバの登録を行う事。
    動作してるかをカーネルログを取得し、確認する。
    静的リンクでの確認と、動的リンクでの確認を行う事。

================================================================================
【課題２】デバイス・ドライバの登録
================================================================================

【関連章】
  第1章 デバイス・ドライバの登録方法
  第4章 メイクファイルについて
  第3章 ログ

【確認項目】
  ・デバイスツリーを使用してドライバを登録する。
    デバイスツリーから適当なパラメータを取得する
    init, probe, suspend, resume関数は最低登録し、ログを仕込む事。
    動作してるかをカーネルログを取得し、確認する。

================================================================================
【課題３】モジュールパラメータ、debugfs、sysfs
================================================================================

【関連章】
  第2章 モジュールパラメータ
  第6章 パーミッション
  第7章 ファイルシステム

【確認項目】
  ・課題２で作ったテストドライバのモジュールパラメータを作る。
    get,set関数を自分で作り、ADBから操作して意図した動作をしているかログで確認する事。
  ・パーミッションを変え、動作を確認する事。
    ⇒write権をなくしてadbからwriteしてみる...など
    生成時のパラメータで変更する方法と、init.rcから変更する方法を試す。

================================================================================
【課題４】サスペンド・レジューム
================================================================================

【関連章】
  第7章 サスペンド機能

【確認項目】
  ・モジュールパラメータ経由でwakelockをかけられるようにし、
    wakelockがかかっているときにサスペンドしない事を確認する。
  ・wakelockを外してサスペンドする事を確認する。
  ・/d/wakeup_sourcesの内容を確認し、
    追加したwakelockが正しく機能している事を確認する。

================================================================================
【課題５】タイマ
================================================================================

【関連章】
  第9章 タイマ

【確認項目】
  ・タイマの生成・停止を行い、ログで確認する。
  ・タイマハンドラではコンテキストが分かるようにログを仕込むこと

================================================================================
【課題６】スレッド
================================================================================

【確認項目】
  ・カーネルスレッドの生成を行い、動作している事をログで確認する。
  ・モジュールパラメータ等からスレッドの停止を行えるようにする。
  ・psコマンドで追加したスレッドが存在する事を確認する。

================================================================================
【課題７】ワークキュー
================================================================================

【関連章】
  第10章 遅延処理

【確認項目】
  ・ワークキューを生成し、課題５で作ったタイマハンドラからワークキュー実行させる
  ・ワークキューの破棄も忘れずに行う事
  ・独自のキューを生成する方法と、kernel共通のキューを使用する方法の二種類を行う
  ・ワークキューのsync処理を行い、動作を確認する
    (ワークキューの処理が終わるまでsync関数内で待たされている事)

================================================================================
【課題８】SMP
================================================================================

【関連章】
  第5章 マルチプロセッサ手法について

【確認項目】
  知識としては必要だが、使用することは稀なため欠番とする。

================================================================================
【課題９】割り込み
================================================================================

【確認項目】
  ・キーに割り当てられたGPIOの割り込みを登録し、割り込みを受け取ってみる
  ・GPIO番号はデバイスツリー経由で取得すること
  ・wakeup設定を行い、動作を確認する
    (キーに割り当てられたGPIOがMPMとして使用できるかは制御仕様書を確認すること)

================================================================================
【課題１０】排他制御
================================================================================

【確認項目】
  ・mutex,spinlockを使い、
    スレッドとワークキュー間の排他制御
    タイマハンドラとスレッドorワークキュー間の排他制御を実装する
  ・紙でいいのでシーケンスを書いてみる
  ・わざとデッドロックが発生するプログラムを作成し、kernel panicを発生させる。
    UARTログを取得し、デッドロックが発生している事を証明する事(解析内容をテキストにまとめる)

================================================================================
【課題１１】malloc
================================================================================

【確認項目】
  ・vmalloc/kmalloc/alloc_pagesの違いを調べる
  ・low memory killer、OOMとは何か、調べる
  ・slabinfo、meminfo、vmallocinfo、buddyinfoはどのような情報が取れるのか調査し、
    実際にvmalloc/kmalloc/alloc_pagesを行い変化を見る
  ・メモリを枯渇させlow memory killerを発生させてみる

================================================================================
【課題１２】GPIO
================================================================================

【関連章】
  第8章 GPIO

【確認項目】
  ・GPIOを制御してLEDを点けたり消したりする
  ・pinctrlを使用して制御すること

================================================================================
【課題１３】実践練習
================================================================================

【確認項目】
  ・飛翔ソフトウェア新人研修-4-2-Linuxドライバ開発編-制御仕様書.docx
  に従った制御を行うドライバを開発する
